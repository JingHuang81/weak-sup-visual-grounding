import argparse
import sys

import numpy as np
import tensorflow as tf
# Disable deprecation warnings.
tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)

from nce_distill_model import main


FLAGS = None


if __name__ == '__main__':
    np.random.seed(0)
    tf.set_random_seed(0)

    parser = argparse.ArgumentParser()
    # Dataset and checkpoints.
    parser.add_argument('--region_feat_path', type=str,
                        help='Path to the region feature hdf5 file.')
    parser.add_argument('--phrase_feat_path', type=str,
                        help='Path to the phrase feature hdf5 file.') 
    parser.add_argument('--glove_path', type=str,
                        help='Path to the glove embedding hdf5 file.')
    parser.add_argument('--phrase_to_label_json', type=str,
                        help='Path to the phrase to label mapping JSON file.')   
    parser.add_argument('--save_dir', type=str,
                        default='checkpoints/nce-distill-model',
                        help='Directory for saving checkpoints.')
    parser.add_argument('--restore_path', type=str,
                        help='Path to the restoring checkpoint MetaGraph file.')
    # Training parameters.
    parser.add_argument('--batch_size', type=int, default=32, help='Batch size for training.')
    parser.add_argument('--sample_size', type=int, default=1, help='Number of positive pair to sample. Must be 1.')
    parser.add_argument('--max_num_epoch', type=int, default=6, help='Max number of epochs to train.')
    parser.add_argument('--num_neg_sample', type=int, default=16, help='Number of negative example to sample.')
    parser.add_argument('--num_region_proposals', type=int, default=30,
                        help='Number of region proposals generated by detector.Default to 30 for VG features.')
    parser.add_argument('--init_learning_rate', type=float, default=1E-4, help='Initial learning rate.')
    parser.add_argument('--decay_steps', type=int, default=0)
    parser.add_argument('--decay_rate', type=float, default=1)
    FLAGS, unparsed = parser.parse_known_args()
    main(FLAGS)
